# This file provides examples of Klipper G-Code macros.  The snippets
# in this file may be copied into the main printer.cfg file and
# customized.

# See docs/Config_Reference.md for a description of parameters.


######################################################################
# Start Print and End Print
######################################################################

# Replace the slicer's custom start and end g-code scripts with
# START_PRINT and END_PRINT. See docs/Slicers.md for more information on using these macros.

[gcode_macro START_PRINT]
gcode:
    M117
    EXCLUDE_OBJECT_DEFINE
    ; Get first-layer bed-temp from slicer
    {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
    ; Get first-layer extruder-temp from slicer
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
    G90 ; use absolute coordinates
    M83 ; extruder relative mode
    M117 Heating
    STATUS_HEATING
    set_led_effect effect=led_bar_heating
    M104 S130 ; set extruder temp for bed leveling
    M140 S{BED_TEMP} ; set bed temp
    M109 S150 ; wait for bed leveling temp
    M190 S{BED_TEMP} ; wait for bed temp
    STATUS_HOMING
    set_led_effect effect=led_bar_homing
    G28 ; home all axis
    STATUS_HOMING
    set_led_effect effect=led_bar_homing
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=True
    Z_TILT_ADJUST
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=qgling VALUE=False
    STATUS_READY
    #G28;
    ; mesh bed
    M117 Calibrating bed mesh
    STATUS_MESHING
    set_led_effect effect=led_bar_meshing
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False
    #Smart_Park
    M117 Waiting on extruder
    M104 S{EXTRUDER_TEMP}; set extruder temp
    STATUS_HEATING
    set_led_effect effect=led_bar_heating
    G0 Z50 F240
    G0 X2 Y10 F3000
    M109 S{EXTRUDER_TEMP} ; wait for extruder temp
    M117 Purging
    set_led_effect effect=led_bar_cleaning
    LINE_PURGE
    STATUS_PRINTING
    set_led_effect effect=led_bar_printing
    M117 Printing
    SKEW_PROFILE LOAD=calilantern_skew_profile

       
[gcode_macro PART_READY]
gcode:
    set_led_effect effect=sb_logo_part_ready replace =1 FADETIME=1.0
    
[gcode_macro END_PRINT]
gcode:
    SET_SKEW CLEAR=1
    M117 Print Complete
    set_led_effect effect=rainbow replace=1 FADETIME=3.0
    set_led_effect effect=rainbow2
    
    # Turn off bed, extruder, and fan
    #M140 S0
    #M104 S0
    #M106 S0
    # Move nozzle away from print while retracting
    #G91
    #G1 X-2 Y-2 E-1.5 F300
    # Raise nozzle by 10mm
    #G1 Z10 F3000
    #G90
    # Disable steppers
    #M84
[gcode_macro QUAD_GANTRY_LEVEL]
gcode:
    Z_TILT_ADJUST


######################################################################
# Beeper
######################################################################

# M300 : Play tone. Beeper support, as commonly found on usual LCD
# displays (i.e. RepRapDiscount 2004 Smart Controller, RepRapDiscount
# 12864 Full Graphic). This defines a custom I/O pin and a custom
# GCODE macro.  Usage:
#   M300 [P<ms>] [S<Hz>]
#   P is the tone duration, S the tone frequency.
# The frequency won't be pitch perfect.


#[output_pin BEEPER_pin]
#pin: EXP1_1
#   Beeper pin. This parameter must be provided.
#   ar37 is the default RAMPS/MKS pin.
#pwm: True
#   A piezo beeper needs a PWM signal, a DC buzzer doesn't.
#value: 0
#   Silent at power on, set to 1 if active low.
#shutdown_value: 0
#   Disable at emergency shutdown (no PWM would be available anyway).
#cycle_time: 0.001
#   Default PWM frequency : 0.001 = 1ms will give a tone of 1kHz
#   Although not pitch perfect.

[gcode_macro M300]
gcode:
    # Use a default 1kHz tone if S is omitted.
    {% set S = params.S|default(1000)|int %}
    # Use a 10ms duration is P is omitted.
    {% set P = params.P|default(100)|int %}
    SET_PIN PIN=BEEPER_pin VALUE=0.5 CYCLE_TIME={ 1.0/S if S > 0 else 1 }
    G4 P{P}
    SET_PIN PIN=BEEPER_pin VALUE=0

#Fan Macro for Auxiliary cooling
[gcode_macro M106]
description: Custom fan control function to allow slicers assuming bambu lab specific aux fan control to define an auxilary part cooling fan speed
rename_existing: M106.1
gcode:
  ## Define the mapping between the bambu lab fans and the fan_generic fans defined
  ## Source: https://forum.bambulab.com/t/bambu-lab-x1-specific-g-code/666
  ## NOTE: ensure P0 is left as "fan". This is important as you cannot set the
  ## standard part cooling fan Using the set_fan_speed command.
  ## This is accounted for in the macro and handled appropriately.
  {% set fan_map = ({
      "P0": "fan",
      "P3": "bentobox",
      "P2": "fan2",
    })
  %}

  ## Divide the params given into an array split on a singular whitespace
  {% set split_params = rawparams.split(" ") %}

  ## If we've had more than one paramater passed define requested fan and speed
  ## if one paramater is passed, assume were asking for the part cooling fan
  {% if split_params|length == 1 %}
    {% set requested_fan = "P0" %}
    {% set fan_speed = rawparams %}
  {% else %}
    {% set requested_fan, fan_speed = split_params %}
  {% endif %}

  ## check to ensure the requested fan is mapped
  ## this allows us to safely ignore commands for fans were not using
  {% if requested_fan in fan_map %}

    ## define the target fan device as per the above map
    {% set target_fan = fan_map[requested_fan] %}

    # If the target fan is the part cooling fan, just use the standard M106.
    {% if target_fan == "fan" %}
      M106.1 {fan_speed}
    {% else %}

      ## strip the leading S from the fan speed
      {% if fan_speed[0:1] == "S" %}
        {% set fan_speed = fan_speed[1:-1] %}
      {% endif %}

      # Convert the 0-255 fan percentage to a percentage between 0 and 1
      {% set fan_percentage = (fan_speed|int / 255 * 10)|round(1) %}

      # Set the requested fan speed on the target fan
      SET_FAN_SPEED fan={target_fan} speed={fan_percentage}
    {% endif %}
  {% endif %}


## Customization:
##   1) copy the gcode_macro _CLIENT_VARIABLE (see below) to your printer.cfg
##   2) remove the comment mark (#) from all lines
##   3) change any value in there to your needs
##
## Use the PAUSE macro direct in your M600:
##  e.g. with a different park position front left and a minimal height of 50 
##    [gcode_macro M600]
##    description: Filament change
##    gcode: PAUSE X=10 Y=10 Z_MIN=50
##  Z_MIN will park the toolhead at a minimum of 50 mm above to bed to make it easier for you to swap filament.
##
## Client variable macro for your printer.cfg
[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 10.0   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 15.0   ; custom y position; value must be within your defined min and max of Y
variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 0.1   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 1800     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
gcode:

######################################################################
# Filament Change
######################################################################

# M600: Filament Change. This macro will pause the printer, move the
# tool to the change position, and retract the filament 50mm. Adjust
# the retraction settings for your own extruder. After filament has
# been changed, the print can be resumed from its previous position
# with the "RESUME" gcode.

[pause_resume]

[gcode_macro M600]
gcode:
  SET_IDLE_TIMEOUT TIMEOUT=7200 ; Increase idle timeout
  PAUSE ; Pause printing
  UNLOAD_FILAMENT ; Unload filament

###### UNLOAD_FILAMENT ######
# 
# Edit the default() value for LENGTH
# to the amount of retraction required to unload the filament
# 
# Edit the default() value for TARGET
# to the target extruder temperature used during filament change
[gcode_macro UNLOAD_FILAMENT]
gcode:
  {% set LENGTH = params.LENGTH|default(50)|float %} ; Unload length
  {% set TARGET = params.TARGET|default(220)|float %} ; Unload temperature
  ##################
  {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
  {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|int|default(170) %} ; Min safe temp
  {% if cur_temp|int < TARGET|int %} ; If current temp is below target
    M117 Heating nozzle...
    M109 S{TARGET} ; Heat nozzle to target temperature
  {% endif %}
  {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
    RESPOND TYPE=error MSG="Below minimum temp. Heating extruder..."
    M109 S{min_temp|int} ; Heat up to min_extrude_temp
  {% endif %}
  G91 ; Relative positioning
  # Pre-unload
  G1 E5.0 F1200 
  G1 E3.0 F1600
  G1 E-13.14 F7000
  # Unload
  G1 E-{LENGTH} F3000
  G90 ; Absolute postitioning


###### LOAD_FILAMENT ######
# 
# # Edit the default() value for FAST
# to the amount of extrusion required to bring the filament to
# just before it starts coming out the hotend (bowden length)
# 
# # Edit the default() value for SLOW
# to the amount of extrusion required after it reaches the hotend (purge amount)
# 
[gcode_macro LOAD_FILAMENT]
gcode:
  {% set SLOW = params.SLOW|default(50)|float %} ; Purge amount
  {% set FAST = params.FAST|default(50)|float %} ; Load length
  ##################
  {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
  {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|int|default(170) %} ; Min safe temp
  {% if params.TARGET is defined %} ; If current temp is below target
    {% set TARGET = params.TARGET|int %}
    {% if cur_temp|int < TARGET|int %}
      M117 Heating nozzle...
      M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
  {% endif %}
  {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
    RESPOND TYPE=error MSG="Below minimum temp. Heating extruder..."
    M109 S{min_temp|int} ; Heat up to min_extrude_temp
  {% endif %}
  M117  LOADING...
  G91 ; Relative positioning
  G1 E25.0 F1000 ; pre-load
  G1 E{FAST} F2500 ; load up to hotend
  G4 P900 ; wait a moment
  G1 E{SLOW} F250 ; purge to change filament
  G90 ; Absolute postitioning
  SET_IDLE_TIMEOUT TIMEOUT=900 ; Return idle timeout to normal


###### PURGE ######
# 
# Edit the default() value for LENGTH
# to the amount of filament you'd like to purge
# 
[gcode_macro PURGE]
gcode:
  {% set LENGTH = params.LENGTH|default(45)|float %} ; Purge length
  ##################
  {% set cur_temp = printer.extruder.temperature|float %} ; Current temperature
  {% set min_temp = printer.configfile.settings.extruder.min_extrude_temp|int|default(170) %} ; Min safe temp
  {% if params.TARGET is defined %} ; If current temp is below target
    {% set TARGET = params.TARGET|int %}
    {% if cur_temp|int < TARGET|int %}
      M117 Heating nozzle...
      M109 S{TARGET} ; Heat nozzle to target temperature
    {% endif %}
  {% endif %}
  {% if printer.extruder.can_extrude == False %} ; Verify extruder is hot enough
    RESPOND TYPE=error MSG="Below minimum temp. Heating extruder..."
    M109 S{min_temp|int} ; Heat up to min_extrude_temp
  {% endif %}
  M117 PURGING..
  G91 ; Relative positioning
  G1 E{LENGTH} F250 ; Purge 45mm of filament
  G90 ; Absolute postitioning


########################
####Custom Macros#######
########################
[gcode_macro ACCELEROMETERQUERY]
gcode:
  ACCELEROMETER_QUERY

[gcode_macro APPLY_PROBEOFFSET]
gcode:  
  Z_OFFSET_APPLY_PROBE

[gcode_macro PID_EXTRUDER] description: PID Tune for the Extruder 
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP|default(210)|float %}
  M106 S204
  PID_CALIBRATE HEATER=extruder TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  M106 S0
  SAVE_CONFIG

[gcode_macro PID_BED] description: PID Tune for the Bed 
gcode:
  #variable_target_temp: 0
  {% set TARGET_TEMP = params.TARGET_TEMP|default(70)|float %}
  #SET_GCODE_VARIABLE MACRO=PID_BED VARIABLE=target_temp         VALUE={ TARGET_TEMP }
  PID_CALIBRATE HEATER=heater_bed TARGET={TARGET_TEMP}
  TURN_OFF_HEATERS
  SAVE_CONFIG

######################################################################
# Override M117 command with rawparams
######################################################################

# The macro below will override the default M117 command to echo the message.
#
# It uses the rawparams pseudo-variable that contains the full unparsed
# parameters that was passed to the M117 command.
#
# As this can include comments, we are trimming the text when a `;` or `#` is
# found, and escaping any existing `"`

[gcode_macro M117]
rename_existing: M117.1
gcode:
  {% if rawparams %}
    {% set escaped_msg = rawparams.split(';', 1)[0].split('\x23', 1)[0]|replace('"', '\\"') %}
    SET_DISPLAY_TEXT MSG="{escaped_msg}"
    RESPOND TYPE=command MSG="{escaped_msg}"
  {% else %}
    SET_DISPLAY_TEXT
  {% endif %}

# SDCard 'looping' (aka Marlin M808 commands) support
#
# Support SDCard looping
[sdcard_loop]

# 'Marlin' style M808 compatibility macro for SDCard looping
[gcode_macro M808]
gcode:
    {% if params.K is not defined and params.L is defined %}SDCARD_LOOP_BEGIN COUNT={params.L|int}{% endif %}
    {% if params.K is not defined and params.L is not defined %}SDCARD_LOOP_END{% endif %}
    {% if params.K is defined and params.L is not defined %}SDCARD_LOOP_DESIST{% endif %}

# Cancel object (aka Marlin/RRF M486 commands) support
#
# Enable object exclusion
[exclude_object]

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

######################################################################
# G130: Set digital potentiometer value
######################################################################

# The macro below uses the MCP4018 SET_DIGIPOT command to implement
# a `G130` as used on classic Mightyboard-based printers such as
# The Makerbot Replicator 2/2X.
#
# The `G130` command can be used to lower the stepper current
# during preheating and raise the current again prior to starting
# the print.  This is necessary for printers with smaller power
# supplies that needed all the power to heat the bed.
#
# This macro requires one or more [mcp4018] configuration sections:
# (x_axis_pot, y_axis_pot, z_axis_pot, a_axis_pot, b_axis_pot)
#
# Example: G130 X20 Y20 Z20 A20 B20 ; Lower stepper Vrefs while heating

[gcode_macro G130]
gcode:
  M400
  {% if ('X' in params) and ('mcp4018 x_axis_pot' in printer.configfile.config) %}
    {% set x_value = params['X']|float %}
    {% set x_axis_pot_scale = printer.configfile.config["mcp4018 x_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=x_axis_pot WIPER={ x_axis_pot_scale * (x_value / 127.0)}
  {% endif %}
  {% if ('Y' in params) and ('mcp4018 y_axis_pot' in printer.configfile.config) %}
    {% set y_value = params['Y']|float %}
    {% set y_axis_pot_scale = printer.configfile.config["mcp4018 y_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=y_axis_pot WIPER={ y_axis_pot_scale * (y_value / 127.0)}
  {% endif %}
  {% if ('Z' in params) and ('mcp4018 z_axis_pot' in printer.configfile.config) %}
    {% set z_value = params['Z']|float %}
    {% set z_axis_pot_scale = printer.configfile.config["mcp4018 z_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=z_axis_pot WIPER={ z_axis_pot_scale * (z_value / 127.0)}
  {% endif %}
  {% if ('A' in params) and ('mcp4018 a_axis_pot' in printer.configfile.config) %}
    {% set a_value = params['A']|float %}
    {% set a_axis_pot_scale = printer.configfile.config["mcp4018 a_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=a_axis_pot WIPER={ a_axis_pot_scale * (a_value / 127.0)}
  {% endif %}
  {% if ('B' in params) and ('mcp4018 b_axis_pot' in printer.configfile.config) %}
    {% set b_value = params['B']|float %}
    {% set b_axis_pot_scale = printer.configfile.config["mcp4018 b_axis_pot"].scale|float %}
    SET_DIGIPOT DIGIPOT=b_axis_pot WIPER={ b_axis_pot_scale * (b_value / 127.0)}
  {% endif %}
